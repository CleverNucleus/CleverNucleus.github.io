I"Ÿ<div class="alert alert-warning" role="alert"><i class="fa fa-warning"></i> <b>Important:</b> This section is now outdated and unsupported. Click <a href="dataattributes-1.18.2_home">here</a> for the latest release.</div>

<h2 id="overview">Overview</h2>

<p>Although attributes are registered to the game and include a fallback value, attributes are not added to entities by default. Attributes exist independent of entities, and only when added as an <em>entity attribute instance</em> (like a wrapper) is the entity able to access and manipulate its value.</p>

<p>Minecraft does this using two container objects: <code class="language-plaintext highlighter-rouge">DefaultAttributeContainer</code> (default attribute container) and <code class="language-plaintext highlighter-rouge">AttributeContainer</code> (attribute container) - or similar, depending on mappings. The default attribute container is a statically built, immutable object that contains a mapping for all the attributes for a given entity type. All entities of the same entity type share the same default attribute container; this is also where the default values for all attributes is defined.</p>

<p>For entities of the same entity type to have unique values, Minecraft uses the attribute container. This object is yet another wrapper, holding the default attribute container and then applying/removing modifiers as needed for that entity. The attribute container is created when the entity is.</p>

<h3 id="1-entity-types">1. Entity Types</h3>

<p>Every entity registered to the game has an entity type, which has a registry key associated with it (such as the player, which has the registry key <code class="language-plaintext highlighter-rouge">minecraft:player</code>). This is important, as it lets as be specific about what attributes we add to what entity types.</p>

<h2 id="json-structure">Json Structure</h2>

<p>Using datapacks, the <code class="language-plaintext highlighter-rouge">entity_types.json</code> file is used to add attributes to an entity type, as well as override the default (starting) value of already added attributes. This file is synonymous with the default attribute container; additionally, the file acts similarly to Minecraft tags, which means that it doesnâ€™t override other datapack <code class="language-plaintext highlighter-rouge">entity_types.json</code> files, rather it forms a collection of entries. Its contents are structured as follows:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"values"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"&lt;entity type registry key&gt;"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"&lt;attribute registry key&gt;"</span><span class="p">:</span><span class="w"> </span><span class="err">&lt;numerical</span><span class="w"> </span><span class="err">default</span><span class="w"> </span><span class="err">value&gt;</span><span class="p">,</span><span class="w">
            </span><span class="err">...</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<h3 id="1-example-1">1. Example 1</h3>

<p>Say we want to adjust the maximum health of the player to be 10 instead of the default 20. We create the directory <code class="language-plaintext highlighter-rouge">data/namespace/attributes/</code> where <code class="language-plaintext highlighter-rouge">namespace</code> is your modid, or some other unique string of characters if you are making a datapack. Inside of the directory, we add the json file <code class="language-plaintext highlighter-rouge">entity_types.json</code>, and populate it with the following:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"values"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"minecraft:player"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"minecraft:generic.max_health"</span><span class="p">:</span><span class="w"> </span><span class="mf">10.0</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Note the presence of the full registry key for the max health attribute, and the full registry key for the entity type for the player. With that, the player will now have a max health of 10.</p>

<h3 id="2-example-2">2. Example 2</h3>

<p>Say we have our mod, examplemod, and we have just created (and registered) the attribute <a href="dataattributes-1.17.1_overrides.html#example-2">Max Mana</a>. We want to add it to the witch mob and for it to have a default value of 30. Firstly, we know that the attributeâ€™s registry key is <code class="language-plaintext highlighter-rouge">examplemod:max_mana</code> and the witch entity typeâ€™s registry key is <code class="language-plaintext highlighter-rouge">minecraft:witch</code>. We again go to the directory <code class="language-plaintext highlighter-rouge">data/examplemod/attributes/</code> and add the json file <code class="language-plaintext highlighter-rouge">entity_types.json</code>. Inside the file we add:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"values"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"minecraft:witch"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"examplemod:max_mana"</span><span class="p">:</span><span class="w"> </span><span class="mf">30.0</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Now the witch has the attribute Max Mana with a default value of 30.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">entity_types.json</code> resource is loaded <em>after</em> the Minecraft (and modded) default attribute containers are created. Therefore, these files will always add to and/or override the contents of the hardcoded default attribute containers.</li>
  <li>The <code class="language-plaintext highlighter-rouge">entity_types.json</code> file of a given mod or datapack can be overridden by creating your own file in the same directory, and then ensuring that your datapack is loaded last.</li>
</ul>

:ET